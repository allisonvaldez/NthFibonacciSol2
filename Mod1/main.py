"""
time: O(n) since we are using memoization to save the base cases and
previously calculated values to save on processing time
space: O(n) space since it depends on the size of the array
"""

"""
Declare the parameters, however we want to initialize the hash table with the 
starting values of 1 pointing to 0, and 2 pointing to 1 as a dictionary data 
value (base cases).

The variable memoize represents a hash table.

Hash table: a type of data structure that stores key-value pairs with the 
keys generated by a hashing function. In other words the index values (also 
known as addresses) for the data elements are generated from the hash function. 
Accessing data is faster since the index values act like a key for the data 
value needing to be accessed.
"""


def get_nth_fib(num, memoize={1: 0, 2: 1}):

    if num in memoize:
        """
        if the number sequence is in the hash table just return it (if previously
        calculated"""
        return memoize[num]
    else:
        """
        else if the number is not already in the hash table then we need to 
        calculate it ourselves with passing in the memoize object to 
        calculate the two base cases.
        """
        memoize[num] = get_nth_fib(num-1) + (num-2)
        return memoize[num]


print(get_nth_fib(2))